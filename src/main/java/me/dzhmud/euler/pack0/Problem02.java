package me.dzhmud.euler.pack0;

import me.dzhmud.euler.EulerSolution;

/**
 *

 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

 *
 * @author dzhmud
 */
public class Problem02 implements EulerSolution {

	public static void main(String[] args) {
		new Problem02().measureTime();
	}

	@Override
	public String getAnswer() {
		final long limit = 4*1000*1000;
		long sum = 0;
		final FibonacciSequence fs = new FibonacciSequence(1,1);
		long current;
		while ((current = fs.getNext()) < limit) {
			if (current % 2 == 0) {
				sum += current;
			}
		}
		return sum + "";
	}

	public static class FibonacciSequence {
		private long previous;
		private long current;
		private int ordinal;

		public FibonacciSequence(long f1, long f2) {
			previous = f1;
			current = f2;
			ordinal = 2;
		}

		public long getNext() {
			final long next = previous + current;
			previous = current;
			current = next;
			ordinal++;
			return current;
		}

		public long getCurrent() {
			return current;
		}

		public long getPrevious() {
			return previous;
		}

		public int getOrdinal() {
			return ordinal;
		}
	}

}
